Anotaciones de comandos

git init
git status
git add fileName
git commit
git commit -a

Para hacer un commit, git en su control de versiones necesita
tener un control de quién hace cambios, por lo que el usuario
deberá ligarse a un correo electrónico, y aproveche para
identificarse con un nombre/nickname. Los siguientes 2 coman-
dos indican que en este sistema operativo trabajará tal usuario
git config --global user.email "bonillajosue1@gmail.com"
git config --global user.name "Josué Bonilla"

git checkout fileName <- restaura el archivo nombredo
git diff fileName <- muestra los cambios en un archivo
git log <- para ver el registro de los commits, las versiones/snapshots del proyecto a través del tiempo

.gitignore <- si dentro de la carpeta de trabajo coloco un archivo
              con este nombre, los nombres de las carpetas o
              archivos (con su respectiva extensión) que estén en
              este documento, no serán incluidos en los agregados,
              ni actualizaciones en el repositorio. Serán completa-
              mente ignorados por Git, como si no existieran.
              Un buen toque: En la terminal puedo distinguir un
              archivo de una carpeta si al final del nombre tiene
              un backslash "\".

git commit -m "aquí coloco el comentario que quiera" <- así no entro al editor de código
git branch <- muestra las versiones/ramas que tiene del código
git branch nombreVersion <- crea una nueva version del proyecto,
                            otra rama sobre la cual trabaja
                            crea una versión alternativa
git checkout branchName <- puedo crear el branch, pero si quiero
                            trabajar en esa versión del proyecto
                            debo ingresar a esa rama con este comando

Cuando quería usar GitHub desde la consola, me daba el siguiente error
tratando de agregar el repositorio:

git remote add origin git@github.com:Josh01B/git-course-test.git
fatal: remote origin already exists.

En los tutoriales, lo que se copia es un HTTPS, pero en mi cuenta de
forma predeterminada yo tenía SSH y no me servía al probar el comando:
git push -u origin master
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Entonces, al ver el error lo cambié a HTTPS, y antes de volverlo a
agregar removí el repositorio anterior con: git remote remove origin
Ingresé mi nombre de usuario y contraseña, y listo, lo logré.


git clone https://github.com/Josh01B/git-course-test.git <- para descargar los archivos en este repositorio
          para este comando en la terminal, solo se va a la carpeta donde desea guardar el proyecto en el
          repositorio y lo ejecuta


Un compa también hizo una especie de resumen:
COMANDOS BASICOS
* git init Oye Git, voy a usar estos documentos contigo ¿vale?
* git add <file> Pasa los docs a staging area
* git add . Pasa todos los archivos
* git commit Pasa los docs de staging area a repository (Después de esto se te va a abrir el editor de código VIN en donde tendrás que escribir un comentario, si te quieres evitar abrir VIN entonces utiliza los siguientes comandos:)
* git commit -m "comentario" Lo mismo que el commit regular, pero ahora no necesitas entrar a VIN
* git status Ver en que status (wd, sa, r) están los docs
* git push Subir los docs a un server (Github)
* git pull  Traer los docs de un server, traer los cambios de tus compañeros
* git clone Hacerte una copia de lo que está en el server a tu PC
* git checkout -- <file> Para revertir los cambios de los archivos
* git diff <file> Para ver las diferencias hechas en los archivos
* git branch Ver las ramas que hay ("master" es la rama default)
* git branch "nombre" Crear una nueva rama
* git checkout "nombre" Ir a una rama en especifico

*  git config -- global user.email "email" Para configurar email del usuario
*  git config -- global user.name "nombre" Para configurar nombre del usuario


vin Es el editor de código de git desde la consola, ahí escribes un comentario para la nueva versión que estés versionando (si no te deja escribir presiona a letra i). Cuando termines presiona esc y luego :wq (write & quit)pasa salir.

.gitignore Es un archivo reservado de git que tenemos que crear si queremos decirle a git los archivos que no vamos a utilizar y así decida ignorarlos.
Escribe dentro de el archivo .gitignore los nombres de los archivos que desees ignorar.
Nota: Las carpetas se escriben solas y los archivos con su terminación.
